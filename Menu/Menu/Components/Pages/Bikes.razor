
@page "/bikes"
@inject HttpClient Http
@rendermode RenderMode.InteractiveServer

<PageTitle>Database</PageTitle>

Select brand and model to get details<br>

<InputSelect ValueExpression="@(()=>selectedBrand)" Value="selectedBrand" ValueChanged="@((string value) => OnBrandSelect(value))">
    <option value=""></option>
    @foreach (var c in brands)
    {
        <option value="@c.Name">@c.Name</option>
    }
</InputSelect>

<InputSelect ValueExpression="@(()=>selectedMotocycle)" Value="selectedMotocycle" ValueChanged="@((string value) => OnMotocycleSelect(value))">
    <option value=""></option>
    @foreach (var c in motocycles.DistinctBy(x=>x.Model))
    {
        <option value="@c.Model">@c.Model</option>
    }
</InputSelect>

<br>
<br>
@foreach (MotorcycleDTO MotocycleDetails in foundmotocycles.OrderBy(x=>x.ProductionStartYear)){

    <BikeDetails motocycle="MotocycleDetails"></BikeDetails>

}

@code
{
    private BrandDTO[] brands = new BrandDTO[0];
    private MotorcycleDTO[] motocycles = new MotorcycleDTO[0];
    private string selectedBrand;
    private string selectedMotocycle;

    private MotorcycleDTO[] foundmotocycles = new MotorcycleDTO[0];


    protected override async Task OnInitializedAsync()
    {
        var products = await Http.GetAsync("api/Motorcycle/GetBrands");
        brands = await products.Content.ReadFromJsonAsync<BrandDTO[]>();
    }


    private async Task OnBrandSelect(string brand)
    {
        selectedBrand = brand;
        var products = await Http.GetAsync("api/Motorcycle/SearchWithBrand?brand=" + brand);
        motocycles = await products.Content.ReadFromJsonAsync<MotorcycleDTO[]>();
    }

    private async Task OnMotocycleSelect(string motocycle)
    {
        selectedMotocycle = motocycle;
        var products = await Http.GetAsync("api/Motorcycle/GetByName?name=" + motocycle);
        foundmotocycles = await products.Content.ReadFromJsonAsync<MotorcycleDTO[]>();
    
    }
}